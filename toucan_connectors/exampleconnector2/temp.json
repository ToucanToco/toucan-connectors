{
  'title': 'Exampleconnector2Connector',
  'description': 'Abstract base class for all toucan connectors.\n\nEach concrete connector should implement the `get_df` method that accepts a\ndatasource definition and return the corresponding pandas dataframe. This\nbase class allows to specify a retry policy on the `get_df` method. The\ndefault is not to retry on error but you can customize some of connector\nmodel parameters to define custom retry policy.\n\nModel parameters:\n\n\n- `max_attempts`: the maximum number of retries before giving up\n- `max_delay`: delay, in seconds, above which we should give up\n- `wait_time`: time, in seconds, between each retry.\n\nIn order to retry only on some custom exception classes, you can override\nthe `_retry_on` class attribute in your concrete connector class.',
  'type': 'object',
  'properties': {
    'data': {
      'title': 'Data',
      'description': 'JSON object to send in the body of the HTTP request',
      'anyOf': [
        {
          '$ref': '#/definitions/SubFieldComplex'
        },
        {
          '$ref': '#/definitions/SubFieldComplex2'
        }
      ]
    }
  },
  'required': [
    'name'
  ],
  'additionalProperties': False,
  'definitions': {
    'RetryPolicy': {
      'title': 'RetryPolicy',
      'description': 'Generic "retry" policy management.\n\nThis is just a declarative wrapper around `tenacity.retry` that should\nease retry policy definition for most classic use cases.\n\nIt can be instantiated with the following parameters:\n\n- `retry_on`: the list of expected exception classes that should trigger a retry\n- `max_attempts`: the maximum number of retries before giving up\n- `max_delay`: delay, in seconds, above which we should give up\n- `wait_time`: time, in seconds, between each retry.\n\nThe class also exposes the `retry_decorator` method that is responsible to convert\nthe parameters aforementioned in a corresponding `tenacity.retry` decorator. If\nyou need a really custom retry policy and want to use the full power of the\n`tenacity` library, you can simply override this method and return your own\n`tenacity.retry` decorator.',
      'type': 'object',
      'properties': {
        'max_attempts': {
          'title': 'Max Attempts',
          'default': 1,
          'type': 'integer'
        },
        'max_delay': {
          'title': 'Max Delay',
          'default': 0.0,
          'type': 'number'
        },
        'wait_time': {
          'title': 'Wait Time',
          'default': 0.0,
          'type': 'number'
        }
      }
    },
    'SubFieldComplex': {
      'title': 'SubFieldComplex 1',
      'type': 'object',
      'properties': {
        'sub_field_example_11': {
          'title': 'sub field string 11',
          'default': 2,
          'type': 'integer'
        },
        'sub_field_example_12': {
          'title': 'sub field int 12',
          'default': 0,
          'type': 'integer'
        }
      }
    },
    'SubFieldComplex2': {
      'title': 'SubFieldComplex 2',
      'type': 'object',
      'properties': {
        'sub_field_example_21': {
          'title': 'sub field string 21',
          'description': 'sub field string 21 description',
          'default': 'test',
          'type': 'string'
        },
        'sub_field_example_22': {
          'title': 'sub field int 22',
          'description': 'sub field int 22 description',
          'default': 'prout',
          'type': 'string'
        }
      }
    }
  }
}
